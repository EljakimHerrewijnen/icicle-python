from typing import List
from enum import Enum

class MemoryProtection(Enum):
    NoAccess = ...
    ReadOnly = ...
    ReadWrite = ...
    ExecuteRead = ...
    ExecuteReadWrite = ...

class MemoryErrorCode(Enum):
    Unallocated = ...
    Unmapped = ...
    Uninitialized = ...
    ReadViolation = ...
    WriteViolation = ...
    ExecViolation = ...
    ReadWatch = ...
    WriteWatch = ...
    Unaligned = ...
    OutOfMemory = ...
    SelfModifyingCode = ...
    AddressOverflow = ...
    Unknown = ...

class MemoryError(Exception):
    code: MemoryErrorCode

class Icicle:
    def __init__(self, architecture: str) -> None: ...

    def mem_map(self, address: int, size: int, protection: MemoryProtection): ...

    def mem_protect(self, address: int, size: int, protection: MemoryProtection): ...

    def mem_read(self, address: int, size: int) -> bytes: ...

    def mem_write(self, address: int, data: bytes) -> None: ...

def architectures() -> List[str]:
    """
    List all the available architectures.
    """
    ...
